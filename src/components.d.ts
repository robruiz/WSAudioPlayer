/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * This class represents a custom audio player component built using WaveSurfer.js, offering
     * functionalities such as play/pause, looping, and region-based audio playback control.
     * Properties managed within the component allow customization of audio appearance,
     * behavior, and additional event handling for a seamless user experience.
     * The component relies on the WaveSurfer.js library to render audio waveforms and manage audio playback.
     * A variety of features including looping regions, event dispatching, and keyboard interactions are supported.
     * Props:
     * - `audio`: URL string of the audio file to be played.
     * - `color`: String for the waveform color.
     * - `progress`: String for the progress bar color (default: "#666666").
     * - `theme`: String indicating the UI theme of the audio player (default: "basic").
     * - `audioTitle`: Title of the audio track.
     * - `duration`: Duration of the audio track (mutable).
     * - `height`: String specifying the height of the waveform.
     * - `resolution`: Resolution value for waveform rendering (default: 100).
     * States:
     * - `isPlaying`: Boolean indicating the current playback state of the audio.
     * - `curTime`: Current playback time of the audio in string format.
     * - `isLooping`: Boolean indicating whether loop mode is active.
     * - `audioRegions`: Array representing the defined audio regions for looping or selection.
     * Methods:
     * - `playpause()`: Toggles between play and pause states for the current audio.
     * - `toggleLoop()`: Enables or disables a full-track looping feature with visual regions.
     * - `enableFullTrackLoop()`: Configures and starts a full-track loop sequence using WaveSurfer.js regions.
     * - `setLoop(enable)`: Globally enables or disables the loop functionality for the audio player.
     * - `create()`: Initializes the WaveSurfer player instance with essential configurations and event listeners.
     * Event Emission:
     * - Emits the `wsAudioPlaying` event when playback starts, sharing audio source details and title.
     * Keyboard Control:
     * - Handles the spacebar keydown event for toggling play/pause, ensuring the key press is valid only within the context of the component.
     * WaveSurfer Instance:
     * - The `wsPlayer` instance provides direct access to WaveSurfer.js methods, such as playback control and region management.
     * - Regions are handled using the `RegionsPlugin` for highlighting and looping selected portions of audio.
     * Shadow DOM:
     * - The component uses Shadow DOM to encapsulate styles and provide a scoped structure for rendering.
     */
    interface WsAudioPlayer {
        "audio": string;
        "audioTitle": string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "audio-title"?: string;
        "color": string;
        /**
          * Creates a WaveSurfer player instance and initializes it with the specified options. Sets up event listeners for playback, audio processing, and global playback control. Initializes the audio waveform, duration, and playback state.
          * @return A promise that resolves when the WaveSurfer player is ready.
         */
        "create": () => Promise<void>;
        "duration": string;
        /**
          * Enables a looping feature for the entire audio track using a region. The looping is manually managed through time updates. This method ensures a region is created to represent the loop and handles playback accordingly.
          * @return A Promise that resolves when the loop has been successfully set up, or logs errors for invalid states.
         */
        "enableFullTrackLoop": () => Promise<void>;
        "height": string;
        /**
          * Toggles the playback state of the media player. If playback is currently ongoing, it will pause; otherwise, it will start/resume.
          * @return A promise that resolves when the playback state toggling, state updates, and event emission are complete.
         */
        "playpause": () => Promise<void>;
        "progress": string;
        "resolution": number;
        /**
          * Enables or disables the loop feature for the media player. When enabled, the media will replay automatically after it finishes.
          * @param enable - A boolean flag to enable (true) or disable (false) the loop functionality.
          * @return A promise that resolves when the loop functionality is successfully updated.
         */
        "setLoop": (enable: boolean) => Promise<void>;
        "theme": string;
        /**
          * Toggles the loop feature of the player. Enables or disables looping for the full track. When enabled, the loop creates a UI region and subscribes to the timeupdate event for continuous looping within the set region. When disabled, it clears the region and unsubscribes from the related event listeners.
          * @return A promise that resolves when the looping state has been successfully toggled.
         */
        "toggleLoop": () => Promise<void>;
    }
}
declare global {
    /**
     * This class represents a custom audio player component built using WaveSurfer.js, offering
     * functionalities such as play/pause, looping, and region-based audio playback control.
     * Properties managed within the component allow customization of audio appearance,
     * behavior, and additional event handling for a seamless user experience.
     * The component relies on the WaveSurfer.js library to render audio waveforms and manage audio playback.
     * A variety of features including looping regions, event dispatching, and keyboard interactions are supported.
     * Props:
     * - `audio`: URL string of the audio file to be played.
     * - `color`: String for the waveform color.
     * - `progress`: String for the progress bar color (default: "#666666").
     * - `theme`: String indicating the UI theme of the audio player (default: "basic").
     * - `audioTitle`: Title of the audio track.
     * - `duration`: Duration of the audio track (mutable).
     * - `height`: String specifying the height of the waveform.
     * - `resolution`: Resolution value for waveform rendering (default: 100).
     * States:
     * - `isPlaying`: Boolean indicating the current playback state of the audio.
     * - `curTime`: Current playback time of the audio in string format.
     * - `isLooping`: Boolean indicating whether loop mode is active.
     * - `audioRegions`: Array representing the defined audio regions for looping or selection.
     * Methods:
     * - `playpause()`: Toggles between play and pause states for the current audio.
     * - `toggleLoop()`: Enables or disables a full-track looping feature with visual regions.
     * - `enableFullTrackLoop()`: Configures and starts a full-track loop sequence using WaveSurfer.js regions.
     * - `setLoop(enable)`: Globally enables or disables the loop functionality for the audio player.
     * - `create()`: Initializes the WaveSurfer player instance with essential configurations and event listeners.
     * Event Emission:
     * - Emits the `wsAudioPlaying` event when playback starts, sharing audio source details and title.
     * Keyboard Control:
     * - Handles the spacebar keydown event for toggling play/pause, ensuring the key press is valid only within the context of the component.
     * WaveSurfer Instance:
     * - The `wsPlayer` instance provides direct access to WaveSurfer.js methods, such as playback control and region management.
     * - Regions are handled using the `RegionsPlugin` for highlighting and looping selected portions of audio.
     * Shadow DOM:
     * - The component uses Shadow DOM to encapsulate styles and provide a scoped structure for rendering.
     */
    interface HTMLWsAudioPlayerElement extends Components.WsAudioPlayer, HTMLStencilElement {
    }
    var HTMLWsAudioPlayerElement: {
        prototype: HTMLWsAudioPlayerElement;
        new (): HTMLWsAudioPlayerElement;
    };
    interface HTMLElementTagNameMap {
        "ws-audio-player": HTMLWsAudioPlayerElement;
    }
}
declare namespace LocalJSX {
    /**
     * This class represents a custom audio player component built using WaveSurfer.js, offering
     * functionalities such as play/pause, looping, and region-based audio playback control.
     * Properties managed within the component allow customization of audio appearance,
     * behavior, and additional event handling for a seamless user experience.
     * The component relies on the WaveSurfer.js library to render audio waveforms and manage audio playback.
     * A variety of features including looping regions, event dispatching, and keyboard interactions are supported.
     * Props:
     * - `audio`: URL string of the audio file to be played.
     * - `color`: String for the waveform color.
     * - `progress`: String for the progress bar color (default: "#666666").
     * - `theme`: String indicating the UI theme of the audio player (default: "basic").
     * - `audioTitle`: Title of the audio track.
     * - `duration`: Duration of the audio track (mutable).
     * - `height`: String specifying the height of the waveform.
     * - `resolution`: Resolution value for waveform rendering (default: 100).
     * States:
     * - `isPlaying`: Boolean indicating the current playback state of the audio.
     * - `curTime`: Current playback time of the audio in string format.
     * - `isLooping`: Boolean indicating whether loop mode is active.
     * - `audioRegions`: Array representing the defined audio regions for looping or selection.
     * Methods:
     * - `playpause()`: Toggles between play and pause states for the current audio.
     * - `toggleLoop()`: Enables or disables a full-track looping feature with visual regions.
     * - `enableFullTrackLoop()`: Configures and starts a full-track loop sequence using WaveSurfer.js regions.
     * - `setLoop(enable)`: Globally enables or disables the loop functionality for the audio player.
     * - `create()`: Initializes the WaveSurfer player instance with essential configurations and event listeners.
     * Event Emission:
     * - Emits the `wsAudioPlaying` event when playback starts, sharing audio source details and title.
     * Keyboard Control:
     * - Handles the spacebar keydown event for toggling play/pause, ensuring the key press is valid only within the context of the component.
     * WaveSurfer Instance:
     * - The `wsPlayer` instance provides direct access to WaveSurfer.js methods, such as playback control and region management.
     * - Regions are handled using the `RegionsPlugin` for highlighting and looping selected portions of audio.
     * Shadow DOM:
     * - The component uses Shadow DOM to encapsulate styles and provide a scoped structure for rendering.
     */
    interface WsAudioPlayer {
        "audio"?: string;
        "audioTitle"?: string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "audio-title"?: string;
        "color"?: string;
        "duration"?: string;
        "height"?: string;
        "progress"?: string;
        "resolution"?: number;
        "theme"?: string;
    }
    interface IntrinsicElements {
        "ws-audio-player": WsAudioPlayer;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * This class represents a custom audio player component built using WaveSurfer.js, offering
             * functionalities such as play/pause, looping, and region-based audio playback control.
             * Properties managed within the component allow customization of audio appearance,
             * behavior, and additional event handling for a seamless user experience.
             * The component relies on the WaveSurfer.js library to render audio waveforms and manage audio playback.
             * A variety of features including looping regions, event dispatching, and keyboard interactions are supported.
             * Props:
             * - `audio`: URL string of the audio file to be played.
             * - `color`: String for the waveform color.
             * - `progress`: String for the progress bar color (default: "#666666").
             * - `theme`: String indicating the UI theme of the audio player (default: "basic").
             * - `audioTitle`: Title of the audio track.
             * - `duration`: Duration of the audio track (mutable).
             * - `height`: String specifying the height of the waveform.
             * - `resolution`: Resolution value for waveform rendering (default: 100).
             * States:
             * - `isPlaying`: Boolean indicating the current playback state of the audio.
             * - `curTime`: Current playback time of the audio in string format.
             * - `isLooping`: Boolean indicating whether loop mode is active.
             * - `audioRegions`: Array representing the defined audio regions for looping or selection.
             * Methods:
             * - `playpause()`: Toggles between play and pause states for the current audio.
             * - `toggleLoop()`: Enables or disables a full-track looping feature with visual regions.
             * - `enableFullTrackLoop()`: Configures and starts a full-track loop sequence using WaveSurfer.js regions.
             * - `setLoop(enable)`: Globally enables or disables the loop functionality for the audio player.
             * - `create()`: Initializes the WaveSurfer player instance with essential configurations and event listeners.
             * Event Emission:
             * - Emits the `wsAudioPlaying` event when playback starts, sharing audio source details and title.
             * Keyboard Control:
             * - Handles the spacebar keydown event for toggling play/pause, ensuring the key press is valid only within the context of the component.
             * WaveSurfer Instance:
             * - The `wsPlayer` instance provides direct access to WaveSurfer.js methods, such as playback control and region management.
             * - Regions are handled using the `RegionsPlugin` for highlighting and looping selected portions of audio.
             * Shadow DOM:
             * - The component uses Shadow DOM to encapsulate styles and provide a scoped structure for rendering.
             */
            "ws-audio-player": LocalJSX.WsAudioPlayer & JSXBase.HTMLAttributes<HTMLWsAudioPlayerElement>;
        }
    }
}
